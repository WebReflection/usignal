/*! (c) Andrea Giammarchi */
const{is:s}=Object;let t;const e=s=>{const e=t;t=e||[];try{if(s(),!e)for(const{value:s}of t);}finally{t=e}};class i{constructor(s){this._=s}then(){return this.value}toJSON(){return this.value}toString(){return this.value}valueOf(){return this.value}}let n;class o extends i{constructor(s,t,e,i){super(s),this.f=i,this.$=!0,this.r=new Set,this.s=new y(t,e)}get value(){if(this.$){const s=n;n=this;try{this.s.value=this._(this.s._)}finally{this.$=!1,n=s}}return this.s.value}}const c={async:!1,equals:!0},r=(s,t,e=c)=>new o(s,t,e,!1);let h;const u=()=>{},a=({s:s})=>{"function"==typeof s._&&(s._=s._())};class l extends o{constructor(s,t,e){super(s,t,e,!0)}run(){this.$=!0,this.value}stop(){this._=u,this.r.clear(),this.s.c.clear()}}class f extends l{constructor(s,t,e){super(s,t,e),this.i=0,this.a=!!e.async,this.m=!0,this.e=[]}get value(){this.a?this.async():this.sync()}async(){this.m&&(this.m=!1,queueMicrotask((()=>{this.m=!0,this.sync()})))}sync(){const s=h;(h=this).i=0,a(this),super.value,h=s}stop(){super.stop(),a(this);for(const s of this.e.splice(0))s.stop()}}const p=(s,t,e=c)=>{let i;if(h){const{i:n,e:o}=h,c=n===o.length;(c||o[n]._!==s)&&(c||o[n].stop(),(o[n]=new f(s,t,e)).value),i=o[n],h.i++}else(i=new f(s,t,e)).value;return()=>{i.stop()}},v=()=>!1;class y extends i{constructor(t,{equals:e}){super(t),this.c=new Set,this.s=!0===e?s:e||v}peek(){return this._}get value(){return n&&(this.c.add(n),n.r.add(this)),this._}set value(s){const e=this._;if(!this.s(this._=s,e)&&this.c.size){const s=[],e=[this];for(const t of e)for(const i of t.c)if(!i.$&&i.r.has(t))if(i.r.clear(),i.$=!0,i.f){s.push(i);const t=[i];for(const s of t)for(const e of s.e)e.r.clear(),e.$=!0,t.push(e)}else e.push(i.s);for(const e of s)t?t.push(e):e.value}}}const _=(s,t=c)=>new y(s,t);export{f as Effect,l as FX,i as Signal,e as batch,r as computed,p as effect,_ as signal};
