/*! (c) Andrea Giammarchi */
const{is:s}=Object;let t;const e=s=>{const e=t;t=e||[];try{if(s(),!e)for(const{value:s}of t);}finally{t=e}};class i{constructor(s){this._=s}then(){return this.value}toJSON(){return this.value}toString(){return this.value}valueOf(){return this.value}}class h extends i{constructor(s,t,e,i){super(s),this.f=i,this.$=!0,this.r=new Set,this.s=new v(t,e)}get value(){if(this.$)try{this.s.value=this._(this.s._)}finally{this.$=!1}return this.s.value}}const n={async:!1,equals:!0},o=(s,t,e=n)=>new h(s,t,e,!1);let c;const r=()=>{},u=s=>{for(const t of s)t.stop()};class l extends h{constructor(s,t,e){super(s,t,e,!0),this.i=0,this.a=!!e.async,this.m=!0,this.e=[]}get value(){this.a?this.async():this.sync()}async(){this.m&&(this.m=!1,queueMicrotask((()=>{this.m=!0,this.sync()})))}sync(){const s=c;c=this,this.i=0;const{length:t}=this.e;super.value,this.i<t&&u(this.e.splice(this.i));for(const{value:s}of this.e);c=s}stop(){this._=r,this.r.clear(),this.s.c.clear(),this.e.length&&u(this.e.splice(0))}}const a=(s,t,e=n)=>{let i;if(c){const{i:h,e:n}=c;h!==n.length&&n[h]._===s||(n[h]=new l(s,t,e)),i=n[h],c.i++}else(i=new l(s,t,e)).value;return()=>{i.stop()}},f=()=>!1;class v extends i{constructor(t,{equals:e}){super(t),this.c=new Set,this.s=!0===e?s:e||f}peek(){return this._}get value(){return this._}set value(s){if(!this.s(this._,s)&&(this._=s,this.c.size)){const s=[],e=[this];for(const t of e)for(const i of t.c)if(!i.$&&i.r.has(t))if(i.$=!0,i.f){s.push(i);const t=[i];for(const s of t)for(const e of s.e)e.$=!0,t.push(e)}else e.push(i.s);for(const e of s)t?t.push(e):e.value}}}const p=(s,t=n)=>new v(s,t);export{i as Signal,e as batch,o as computed,a as effect,p as signal};
